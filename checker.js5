#!/usr/bin/env node
"use strict";

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _lodashUniq = require("lodash.uniq");

var _lodashUniq2 = _interopRequireDefault(_lodashUniq);

var _acorn = require("acorn");

var acorn = _interopRequireWildcard(_acorn);

if (process.argv.length < 3) {
    process.stderr.write("Usage: node " + process.argv[1] + " FILE...\n");
    process.exit(1);
}

function walk(object, callback) {
    if (object == null) return;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = Object.keys(object)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var key = _step.value;

            if (typeof object[key] === "object") {
                walk(object[key], callback);
                callback(key, object[key]);
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator["return"]) {
                _iterator["return"]();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
}

function compare(object, matchObject) {
    var correct = false;

    if (!object || !matchObject) return false;

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
        for (var _iterator2 = Object.keys(object)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var key = _step2.value;

            if (Object.keys(matchObject).indexOf(key) !== -1) {
                if (typeof object[key] === "object" && typeof matchObject[key] === "object") {
                    if (Object.keys(matchObject[key]).length === 0) correct = true;else correct = compare(object[key], matchObject[key]);
                } else {
                    if (matchObject[key] !== object[key]) correct = false;
                    if (matchObject[key] === object[key]) correct = true;
                }
            }
        }
    } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"]) {
                _iterator2["return"]();
            }
        } finally {
            if (_didIteratorError2) {
                throw _iteratorError2;
            }
        }
    }

    return correct;
}

function find(object, matchObject, callback) {
    walk(object, function (key, value) {
        if (!value) return;

        if (compare(value, matchObject)) callback(key, value);
    });
}

/*eslint-disable no-loop-func*/
var errors = [];

var _loop = function (i) {
    var fileName = process.argv[i];
    var input = _fs2["default"].readFileSync(fileName).toString().replace(/^#!.*$/mg, "");

    try {
        (function () {
            var parsed = acorn.parse(input, { ecmaVersion: 6, sourceType: "module" });

            var classes = {};

            find(parsed, { type: "ClassDeclaration" }, function (key, value) {
                var className = value.id.name;
                classes[className] = {};
                var currentClass = classes[className];

                currentClass.superClass = value.superClass ? value.superClass.name : null;
                currentClass.children = [];
                currentClass.declarations = [];

                find(value.body.body, { type: "MethodDefinition" }, function (key, value) {
                    if (value.kind === "constructor") {
                        find(value, { type: "FunctionExpression", body: { type: "MemberExpression" } }, function (key, value) {
                            find(value.body, { type: "MemberExpression" }, function (key, value) {
                                if (value.object.type === "ThisExpression") {
                                    var declaration = input.slice(value.start, value.end);
                                    if (currentClass.declarations.indexOf(declaration) === -1) {
                                        currentClass.declarations.push(declaration);
                                    }
                                }
                            });
                        });
                    }
                    currentClass.declarations.push("this." + value.key.name);
                });
            });

            _iteratorNormalCompletion3 = true;
            _didIteratorError3 = false;
            _iteratorError3 = undefined;

            try {
                for (_iterator3 = Object.keys(classes)[Symbol.iterator](); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var className = _step3.value;

                    var currentClass = classes[className];
                    var superClass = classes[currentClass.superClass];

                    if (!superClass) continue;

                    superClass.children.push(currentClass);
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3["return"]) {
                        _iterator3["return"]();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            _iteratorNormalCompletion4 = true;
            _didIteratorError4 = false;
            _iteratorError4 = undefined;

            try {
                for (_iterator4 = Object.keys(classes)[Symbol.iterator](); !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var className = _step4.value;

                    var currentClass = classes[className];
                    var parentDeclarations = currentClass.declarations;

                    _iteratorNormalCompletion6 = true;
                    _didIteratorError6 = false;
                    _iteratorError6 = undefined;

                    try {
                        for (_iterator6 = currentClass.children[Symbol.iterator](); !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                            var childClass = _step6.value;

                            (_childClass$declarations = childClass.declarations).push.apply(_childClass$declarations, _toConsumableArray(parentDeclarations));
                            childClass.declarations = (0, _lodashUniq2["default"])(childClass.declarations);
                        }
                    } catch (err) {
                        _didIteratorError6 = true;
                        _iteratorError6 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion6 && _iterator6["return"]) {
                                _iterator6["return"]();
                            }
                        } finally {
                            if (_didIteratorError6) {
                                throw _iteratorError6;
                            }
                        }
                    }
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4["return"]) {
                        _iterator4["return"]();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            _iteratorNormalCompletion5 = true;
            _didIteratorError5 = false;
            _iteratorError5 = undefined;

            try {
                for (_iterator5 = Object.keys(classes)[Symbol.iterator](); !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var className = _step5.value;

                    var currentClass = classes[className];
                    var extendsStr = currentClass.superClass ? " extends " + currentClass.superClass : "";
                    process.stdout.write("Class declaration found: " + className + "" + extendsStr + "\n");
                    process.stdout.write("\tDeclarations:\n\t  " + currentClass.declarations.join("\n\t  ") + "\n");
                }
            } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion5 && _iterator5["return"]) {
                        _iterator5["return"]();
                    }
                } finally {
                    if (_didIteratorError5) {
                        throw _iteratorError5;
                    }
                }
            }

            find(parsed, { type: "ClassDeclaration" }, function (key, value) {
                var className = value.id.name;
                var currentClass = classes[className];

                find(value.body.body, { type: "MethodDefinition", value: { type: "FunctionExpression" } }, function (key, value) {
                    find(value.value.body, { type: "MemberExpression" }, function (key, value) {
                        if (value.object.type === "ThisExpression") {
                            var declaration = input.slice(value.start, value.end);

                            if (/this\[.*?\]/.test(declaration)) return; // Cannot handle dynamic getting

                            // Attempt to handle this._var[dynamic] by stripping dynamic portion
                            if (/this\..*?\[.*?\]/.test(declaration)) {
                                declaration = declaration.replace(/^(.*?)\[.*?/, /$1/);
                            }

                            if (currentClass.declarations.indexOf(declaration) === -1) {
                                var loc = acorn.getLineInfo(input, value.start);
                                var _location = "" + fileName + ":" + loc.line + ":" + (loc.column + 1);
                                errors.push("" + _location + ": \"" + declaration + "\" not initialized in constructor of class " + className + "\n");
                            }
                        }
                    });
                });
            });
        })();
    } catch (e) {
        process.stderr.write("When processing " + process.argv[i] + " caught error: ");
        throw e;
    }
};

for (var i = 2; i < process.argv.length; i++) {
    var _iteratorNormalCompletion3;

    var _didIteratorError3;

    var _iteratorError3;

    var _iterator3, _step3;

    var _iteratorNormalCompletion4;

    var _didIteratorError4;

    var _iteratorError4;

    var _iterator4, _step4;

    var _iteratorNormalCompletion6;

    var _didIteratorError6;

    var _iteratorError6;

    var _iterator6, _step6;

    var _childClass$declarations;

    var _iteratorNormalCompletion5;

    var _didIteratorError5;

    var _iteratorError5;

    var _iterator5, _step5;

    _loop(i);
}

errors.forEach(function (error) {
    return process.stderr.write(error);
});

//# sourceMappingURL=data:application/json;base64,
